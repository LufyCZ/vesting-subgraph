// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claims(): Array<string> {
    let value = this.get("claims");
    return value.toStringArray();
  }

  set claims(value: Array<string>) {
    this.set("claims", Value.fromStringArray(value));
  }

  get totalClaimed(): BigDecimal {
    let value = this.get("totalClaimed");
    return value.toBigDecimal();
  }

  set totalClaimed(value: BigDecimal) {
    this.set("totalClaimed", Value.fromBigDecimal(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Claim entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Claim entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Claim", id.toString(), this);
  }

  static load(id: string): Claim | null {
    return store.get("Claim", id) as Claim | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get week(): i32 {
    let value = this.get("week");
    return value.toI32();
  }

  set week(value: i32) {
    this.set("week", Value.fromI32(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class Week extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Week entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Week entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Week", id.toString(), this);
  }

  static load(id: string): Week | null {
    return store.get("Week", id) as Week | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberOfClaims(): BigInt {
    let value = this.get("numberOfClaims");
    return value.toBigInt();
  }

  set numberOfClaims(value: BigInt) {
    this.set("numberOfClaims", Value.fromBigInt(value));
  }

  get totalClaimed(): BigDecimal {
    let value = this.get("totalClaimed");
    return value.toBigDecimal();
  }

  set totalClaimed(value: BigDecimal) {
    this.set("totalClaimed", Value.fromBigDecimal(value));
  }

  get merkleRoot(): string {
    let value = this.get("merkleRoot");
    return value.toString();
  }

  set merkleRoot(value: string) {
    this.set("merkleRoot", Value.fromString(value));
  }
}
